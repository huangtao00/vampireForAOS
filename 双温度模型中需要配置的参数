sim:Teq			//room temperature
sim:equilibration_time  //进入磁化平衡态的时间 
sim:total_time          //后面跑具体program时,所用的时间 


program中要使用 two_temperature 这个仿真程序



time_from_start是双温度模型中的时间变量，通过这个变量，使用two_temperature_function
这个函数，计算出spin system的温度，然后耦合到hamilton量中
所以双温度模型中，计算中需要的参数全在这个函数中：two_temperature_function



input文件中需要指定的参数：

	
sim:equilibration-temperature= x    //指定材料的初始温度
const double G  = sim::TTG;   //electron and phonon coupling constant
const double Ce = sim::TTCe;  //electron capacity
const double Cl = sim::TTCl;  //phonon capacity

const double dt = mp::dt_SI;  //双温度的dt直接用llg方程的dt
sim::pump_power  // 这两个参数非常重要 input file中配置
sim::pump_time   //
sim::HeatSinkCouplingConstant //可以决定散热的速度
sim::pump_function  //材料温度变化的函数

整理上面的内容-input文件中需要配置的参数为：
1: program 作 two_temperature的仿真
2: sim:equilibration-temperature  材料的初始温度
3: sim::TTG  电子 声子耦合常数
4: sim::TTCe sim::TTCl  电子和声子的capacity
5: 激光的pump_power （应该是IF的乘积）
6: 激光的pump_time   (作用的时间长度）
7: 材料的温度散去速度 sim::HeatSinkCouplingConstant 


========================
input文件中具体的内容如下：
sim:program=laser-pulse      #使用激光脉冲加热材料
sim:laser-pulse-temporal-profile= two-temperature  #使用双温度模型来加热材料
sim:equilibration-temperature=300  #设置材料的初始温度
sim:two-temperature-heat-sink-coupling= 0   // 1.1e12
sim:two-temperature-electron-heat-capacity= 225
sim:two-temperature-phonon-heat-capacity=   3.3e6  
sim:two-temperature-electron-phonon-coupling= 18.0e17
sim:laser-pulse-time=30.0e-14
sim:laser-pulse-power=28e20  # equal to IF I=7e18 ; F is fluence 400
sim:equilibration-time-steps=20000
sim:loop-time-steps=30000  # 3 ps
sim:time-step=1.0E-16     #dt 
sim:partial-time-steps=100  #  这个是输出结果单隔的steps

sim:applied-field-strength= 0
sim:applied-field-unit-vector=0,0.235,0.9  #almost z direction

##考虑到6nm的 coerciviy field是 2Tesla,所以下面加外场时，也从2Tesla开始


===================================================================================


    //define all the constants we needed for double temperature model
    const double pump_time=30.0e-12*0.01;   //laser pulse time  : 1 attosecond to 1 s
    const double laser_I=7e18;
    double laser_F=400;
    double pump_power=laser_I*laser_F;//3.0e21;  //laser power

    const double dt= 1e-16;
 

双温度的作用是产生一个随时变化的温度变量,适当调整heat-sink-coupling，可以改变材料散热的速度
需要

双温度作用于材料后，先给个外加偏置场，看下这个激光脉冲能否去磁化
情况：
1：外磁场为0,材料初始磁化为z方向，双脉冲作用于材料，是否去磁,（理论上材料应该会去磁）
2：外磁场为非0常数（2Tesla）时，与材料的初始磁化z相同的外磁场，双脉冲作用于材料，（当外磁场大于某一值时，不会去磁）

接下再把反法拉第场加进去（注意 heat-sink 系数的调节，会对上面结果有影响）

=====================================================================================
Tue Feb 14 17:33:04 CST 2017

=====================================================================================
使用6nm大小的柱状颗粒

0外磁场时，double temperature model跑一次，观察磁化变化情况，材料去磁


外场 25Tesla时，材料磁性不变


加入double temperaure model的已经完成，测试的几个demo的结果也是与想像的一致的：
1：没有加入外磁场时，
激光功率比较小时，材料coercivity足够大，材料不会去磁
激光功率增大时， 材料coercivity不足以 抵抗热扰动，导致材料去磁

2：加入外磁场时：
外磁场一定时：当激光功率比较小时，不足以去磁，逐渐增加激光的功率，材料最终去磁

激光功率一定时（比较大）：当外磁场比较小时，材料去磁，逐渐增加外磁场的大小，材料最终不去磁


=====================================================================================
下面开始考虑如何加入IFE field,这个场的大小和时间起止要可调
当调节IFE field时，可以把input文件中激光的laser-pulse-power设置为0

怎么加入一个时变场，
IFE field就是一个时变的外场，所以直接在外场中添加就行了，但是这个外场的时间和激光加入的起始时间存在
关系，所以这一点面要去处理

办法就是对外场进行改造，考虑这两个因素的时候，恒定外磁场应试是不存在的，所以需要考虑怎么变化
只能在fields.cpp 151行这个函数下手 	
if(sim::hamiltonian_simulation_flags[2]==1) calculate_applied_fields(start_index,end_index);

因为这个外场只是与时间有关系，所以我们只需要得到激光作用在材料上的起止时间即可

需要关心的参数：激光加入后，多久才产生IFE field

在equilbration阶段，激光的pulse_start_time为0

这一部分才是我们需要改变的

// Declare constant temporaries for global field
// we have to change this part for inverse faraday effect field, considering sim::time variable
const double Hx=sim::H_vec[0]*sim::H_applied;
const double Hy=sim::H_vec[1]*sim::H_applied;
const double Hz=sim::H_vec[2]*sim::H_applied;


if (sim::pulse_start_time==0)
{
//equilibration stage  ,external field is 0 T
}
else
{
 dtime=sim::time-sim::pulse_start_time;
 double dt=dtime*dt_SI;
	//the values of wait_time , dur_time, H_IEF  come from the input file written by myself
	if (dt<wait_time)
	{
	sim::H_applied=0 ;
	}
	else if (dt>wait_time+dur_time)
	{
	sim::H_applied=0 ;
	}
	else
	{
	sim::H_applied=H_IFE ;
	}

}
上面三个参数wait_time , dur_time, H_IEF 需要在input文件中指定，方便性考虑
目前这个阶段，可以

//parameters for suitable laser pulse for AOS

         double wait_time= 7.8e-13; // 0.13ps
         double dur_time =9.4e-13;  //1.5ps 2ps
         double H_IFE= -4;

//


laser fluence:56E20 /7e18   80  strong   4 Tesla
laser fluence:28E20 /7e18   40  suitable 4 Tesla
laser fluence:14e20 /7e16   20  suitable 3 Tesla

laser fluence:7e20 /7e16   10  weak 2 Teslas

//××××××××××××××××××××××××××××××××//
Tue Mar 14 16:20:08 CST 2017
考虑后面需要对以下三个参数进行修改后得到结果，需要在input文件中对这三个值进行配置，而不是在fields.cpp文件中改源码，然后重新编译再运行，
需要对加入三个全局变量：
         double wait_time= 7.8e-13; // 0.13ps
         double dur_time =9.4e-13;  //1.5ps 2ps
         double H_IFE= -4;

//以上三个全局变量的名字如下：
double sim::pulse_wait_time
double sim::pulse_Hief_dur_time
double sim::pulse_Hief_field

//input解释文字部分，需要添加三个可解析的关键字
为vampire添加新功能的几个步骤：
1：需要哪些新的全局变量 （一般是可在input文件中配置的变量，为这些全局变量取好名（见名知意最好），
然后将这些全局变量声明放到sim.hpp中,定义放到sim.cpp文件中
2：添加input关键字解析部分，这一部分还是比较复杂的，（需要理清楚一下）
vio.cpp line 290 to 298 有很多match函数，我们需要把这三个double变量赋值解析的情况 放到match_sim函数中
int match_sim(...)在vio.cpp文件中1400行
这把这三个变量的解析加到vio.cpp 1750行
input文件中内容如下：
	sim:pulse_wait_time=7.8E-13
	sim:pulse_Hief_dur_time=9.4E-13
	sim:pulse_Hief_field=-4





