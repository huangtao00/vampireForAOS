# This file was generated by an application wizard of Qt Creator.
# The code below handles deployment to Android and Maemo, aswell as copying
# of the application data to shadow build directories on desktop.
# It is recommended not to modify this file, since newer versions of Qt Creator
# may offer an updated version of it.

defineTest(qtcAddDeployment) {
for(deploymentfolder, DEPLOYMENTFOLDERS) {
    item = item$${deploymentfolder}
    greaterThan(QT_MAJOR_VERSION, 4) {
        itemsources = $${item}.files
    } else {
        itemsources = $${item}.sources
    }
    $$itemsources = $$eval($${deploymentfolder}.source)
    itempath = $${item}.path
    $$itempath= $$eval($${deploymentfolder}.target)
    export($$itemsources)
    export($$itempath)
    DEPLOYMENT += $$item
}

MAINPROFILEPWD = $$PWD

android-no-sdk {
    for(deploymentfolder, DEPLOYMENTFOLDERS) {
        item = item$${deploymentfolder}
        itemfiles = $${item}.files
        $$itemfiles = $$eval($${deploymentfolder}.source)
        itempath = $${item}.path
        $$itempath = /data/user/qt/$$eval($${deploymentfolder}.target)
        export($$itemfiles)
        export($$itempath)
        INSTALLS += $$item
    }

    target.path = /data/user/qt

    export(target.path)
    INSTALLS += target
} else:android {
    for(deploymentfolder, DEPLOYMENTFOLDERS) {
        item = item$${deploymentfolder}
        itemfiles = $${item}.files
        $$itemfiles = $$eval($${deploymentfolder}.source)
        itempath = $${item}.path
        $$itempath = /assets/$$eval($${deploymentfolder}.target)
        export($$itemfiles)
        export($$itempath)
        INSTALLS += $$item
    }

    x86 {
        target.path = /libs/x86
    } else: armeabi-v7a {
        target.path = /libs/armeabi-v7a
    } else {
        target.path = /libs/armeabi
    }

    export(target.path)
    INSTALLS += target
} else:win32 {
    copyCommand =
    for(deploymentfolder, DEPLOYMENTFOLDERS) {
        source = $$MAINPROFILEPWD/$$eval($${deploymentfolder}.source)
        source = $$replace(source, /, \\)
        sourcePathSegments = $$split(source, \\)
        target = $$OUT_PWD/$$eval($${deploymentfolder}.target)/$$last(sourcePathSegments)
        target = $$replace(target, /, \\)
        target ~= s,\\\\\\.?\\\\,\\,
        !isEqual(source,$$target) {
            !isEmpty(copyCommand):copyCommand += &&
            isEqual(QMAKE_DIR_SEP, \\) {
                copyCommand += $(COPY_DIR) \"$$source\" \"$$target\"
            } else {
                source = $$replace(source, \\\\, /)
                target = $$OUT_PWD/$$eval($${deploymentfolder}.target)
                target = $$replace(target, \\\\, /)
                copyCommand += test -d \"$$target\" || mkdir -p \"$$target\" && cp -r \"$$source\" \"$$target\"
            }
        }
    }
    !isEmpty(copyCommand) {
        copyCommand = @echo Copying application data... && $$copyCommand
        copydeploymentfolders.commands = $$copyCommand
        first.depends = $(first) copydeploymentfolders
        export(first.depends)
        export(copydeploymentfolders.commands)
        QMAKE_EXTRA_TARGETS += first copydeploymentfolders
    }
} else:ios {
    copyCommand =
    for(deploymentfolder, DEPLOYMENTFOLDERS) {
        source = $$MAINPROFILEPWD/$$eval($${deploymentfolder}.source)
        source = $$replace(source, \\\\, /)
        target = $CODESIGNING_FOLDER_PATH/$$eval($${deploymentfolder}.target)
        target = $$replace(target, \\\\, /)
        sourcePathSegments = $$split(source, /)
        targetFullPath = $$target/$$last(sourcePathSegments)
        targetFullPath ~= s,/\\.?/,/,
        !isEqual(source,$$targetFullPath) {
            !isEmpty(copyCommand):copyCommand += &&
            copyCommand += mkdir -p \"$$target\"
            copyCommand += && cp -r \"$$source\" \"$$target\"
        }
    }
    !isEmpty(copyCommand) {
        copyCommand = echo Copying application data... && $$copyCommand
        !isEmpty(QMAKE_POST_LINK): QMAKE_POST_LINK += ";"
        QMAKE_POST_LINK += "$$copyCommand"
        export(QMAKE_POST_LINK)
    }
} else:unix {
    maemo5 {
        desktopfile.files = $${TARGET}.desktop
        desktopfile.path = /usr/share/applications/hildon
        icon.files = $${TARGET}64.png
        icon.path = /usr/share/icons/hicolor/64x64/apps
    } else:!isEmpty(MEEGO_VERSION_MAJOR) {
        desktopfile.files = $${TARGET}_harmattan.desktop
        desktopfile.path = /usr/share/applications
        icon.files = $${TARGET}80.png
        icon.path = /usr/share/icons/hicolor/80x80/apps
    } else { # Assumed to be a Desktop Unix
        copyCommand =
        for(deploymentfolder, DEPLOYMENTFOLDERS) {
            source = $$MAINPROFILEPWD/$$eval($${deploymentfolder}.source)
            source = $$replace(source, \\\\, /)
            macx {
                target = $$OUT_PWD/$${TARGET}.app/Contents/Resources/$$eval($${deploymentfolder}.target)
            } else {
                target = $$OUT_PWD/$$eval($${deploymentfolder}.target)
            }
            target = $$replace(target, \\\\, /)
            sourcePathSegments = $$split(source, /)
            targetFullPath = $$target/$$last(sourcePathSegments)
            targetFullPath ~= s,/\\.?/,/,
            !isEqual(source,$$targetFullPath) {
                !isEmpty(copyCommand):copyCommand += &&
                copyCommand += $(MKDIR) \"$$target\"
                copyCommand += && $(COPY_DIR) \"$$source\" \"$$target\"
            }
        }
        !isEmpty(copyCommand) {
            copyCommand = @echo Copying application data... && $$copyCommand
            copydeploymentfolders.commands = $$copyCommand
            first.depends = $(first) copydeploymentfolders
            export(first.depends)
            export(copydeploymentfolders.commands)
            QMAKE_EXTRA_TARGETS += first copydeploymentfolders
        }
    }
    !isEmpty(target.path) {
        installPrefix = $${target.path}
    } else {
        installPrefix = /opt/$${TARGET}
    }
    for(deploymentfolder, DEPLOYMENTFOLDERS) {
        item = item$${deploymentfolder}
        itemfiles = $${item}.files
        $$itemfiles = $$eval($${deploymentfolder}.source)
        itempath = $${item}.path
        $$itempath = $${installPrefix}/$$eval($${deploymentfolder}.target)
        export($$itemfiles)
        export($$itempath)
        INSTALLS += $$item
    }

    !isEmpty(desktopfile.path) {
        export(icon.files)
        export(icon.path)
        export(desktopfile.files)
        export(desktopfile.path)
        INSTALLS += icon desktopfile
    }

    isEmpty(target.path) {
        target.path = $${installPrefix}/bin
        export(target.path)
    }
    INSTALLS += target
}

export (ICON)
export (INSTALLS)
export (DEPLOYMENT)
export (LIBS)
export (QMAKE_EXTRA_TARGETS)
}

HEADERS += \
    $$PWD/../vampire/src/ltmp/internal.hpp \
    $$PWD/../vampire/src/qvoronoi/geom.hpp \
    $$PWD/../vampire/src/qvoronoi/io.hpp \
    $$PWD/../vampire/src/qvoronoi/libqhull.hpp \
    $$PWD/../vampire/src/qvoronoi/mem.hpp \
    $$PWD/../vampire/src/qvoronoi/merge.hpp \
    $$PWD/../vampire/src/qvoronoi/poly.hpp \
    $$PWD/../vampire/src/qvoronoi/qhrandom.hpp \
    $$PWD/../vampire/src/qvoronoi/qhull_a.hpp \
    $$PWD/../vampire/src/qvoronoi/qset.hpp \
    $$PWD/../vampire/src/qvoronoi/qvoronoi.hpp \
    $$PWD/../vampire/src/qvoronoi/stat.hpp \
    $$PWD/../vampire/src/qvoronoi/user.hpp \
    $$PWD/../vampire/hdr/atoms.hpp \
    $$PWD/../vampire/hdr/category.hpp \
    $$PWD/../vampire/hdr/cells.hpp \
    $$PWD/../vampire/hdr/create.hpp \
    $$PWD/../vampire/hdr/demag.hpp \
    $$PWD/../vampire/hdr/errors.hpp \
    $$PWD/../vampire/hdr/grains.hpp \
    $$PWD/../vampire/hdr/LLG.hpp \
    $$PWD/../vampire/hdr/ltmp.hpp \
    $$PWD/../vampire/hdr/material.hpp \
    $$PWD/../vampire/hdr/mtrand.hpp \
    $$PWD/../vampire/hdr/program.hpp \
    $$PWD/../vampire/hdr/random.hpp \
    $$PWD/../vampire/hdr/sim.hpp \
    $$PWD/../vampire/hdr/stats.hpp \
    $$PWD/../vampire/hdr/units.hpp \
    $$PWD/../vampire/hdr/vcuda.hpp \
    $$PWD/../vampire/hdr/vio.hpp \
    $$PWD/../vampire/hdr/vmath.hpp \
    $$PWD/../vampire/hdr/vmpi.hpp \
    $$PWD/../vampire/hdr/voronoi.hpp

SOURCES += \
    $$PWD/../vampire/src/create/create_system2.cpp \
    $$PWD/../vampire/src/create/cs_create_crystal_structure2.cpp \
    $$PWD/../vampire/src/create/cs_create_neighbour_list2.cpp \
    $$PWD/../vampire/src/create/cs_create_system_type2.cpp \
    $$PWD/../vampire/src/create/cs_particle_shapes.cpp \
    $$PWD/../vampire/src/create/cs_set_atom_vars2.cpp \
    $$PWD/../vampire/src/create/cs_voronoi2.cpp \
    $$PWD/../vampire/src/create/multilayers.cpp \
    $$PWD/../vampire/src/data/atoms.cpp \
    $$PWD/../vampire/src/data/category.cpp \
    $$PWD/../vampire/src/data/cells.cpp \
    $$PWD/../vampire/src/data/grains.cpp \
    $$PWD/../vampire/src/data/lattice_anisotropy.cpp \
    $$PWD/../vampire/src/ltmp/absorption_profile.cpp \
    $$PWD/../vampire/src/ltmp/data.cpp \
    $$PWD/../vampire/src/ltmp/field.cpp \
    $$PWD/../vampire/src/ltmp/initialise.cpp \
    $$PWD/../vampire/src/ltmp/interface.cpp \
    $$PWD/../vampire/src/ltmp/is_enabled.cpp \
    $$PWD/../vampire/src/ltmp/local_temperature.cpp \
    $$PWD/../vampire/src/ltmp/output.cpp \
    $$PWD/../vampire/src/main/initialise_variables.cpp \
    $$PWD/../vampire/src/main/main.cpp \
    $$PWD/../vampire/src/main/material.cpp \
    $$PWD/../vampire/src/mpi/LLGHeun-mpi.cpp \
    $$PWD/../vampire/src/mpi/LLGMidpoint-mpi.cpp \
    $$PWD/../vampire/src/mpi/mpi_comms.cpp \
    $$PWD/../vampire/src/mpi/mpi_create2.cpp \
    $$PWD/../vampire/src/mpi/mpi_generic.cpp \
    $$PWD/../vampire/src/program/bmark.cpp \
    $$PWD/../vampire/src/program/cmc_anisotropy.cpp \
    $$PWD/../vampire/src/program/curie_temperature.cpp \
    $$PWD/../vampire/src/program/diagnostics.cpp \
    $$PWD/../vampire/src/program/effective_damping.cpp \
    $$PWD/../vampire/src/program/field_cool.cpp \
    $$PWD/../vampire/src/program/hamr.cpp \
    $$PWD/../vampire/src/program/hybrid_cmc.cpp \
    $$PWD/../vampire/src/program/hysteresis.cpp \
    $$PWD/../vampire/src/program/lagrange.cpp \
    $$PWD/../vampire/src/program/LLB_Boltzmann.cpp \
    $$PWD/../vampire/src/program/localised_temperature_pulse.cpp \
    $$PWD/../vampire/src/program/partial_hysteresis.cpp \
    $$PWD/../vampire/src/program/static_hysteresis.cpp \
    $$PWD/../vampire/src/program/temperature_pulse.cpp \
    $$PWD/../vampire/src/program/time_series.cpp \
    $$PWD/../vampire/src/qvoronoi/geom.cpp \
    $$PWD/../vampire/src/qvoronoi/geom2.cpp \
    $$PWD/../vampire/src/qvoronoi/global.cpp \
    $$PWD/../vampire/src/qvoronoi/io.cpp \
    $$PWD/../vampire/src/qvoronoi/libqhull.cpp \
    $$PWD/../vampire/src/qvoronoi/mem.cpp \
    $$PWD/../vampire/src/qvoronoi/merge.cpp \
    $$PWD/../vampire/src/qvoronoi/poly.cpp \
    $$PWD/../vampire/src/qvoronoi/poly2.cpp \
    $$PWD/../vampire/src/qvoronoi/qhrandom.cpp \
    $$PWD/../vampire/src/qvoronoi/qset.cpp \
    $$PWD/../vampire/src/qvoronoi/qvoronoi.cpp \
    $$PWD/../vampire/src/qvoronoi/rboxlib.cpp \
    $$PWD/../vampire/src/qvoronoi/stat.cpp \
    $$PWD/../vampire/src/qvoronoi/user.cpp \
    $$PWD/../vampire/src/qvoronoi/usermem.cpp \
    $$PWD/../vampire/src/qvoronoi/userprintf.cpp \
    $$PWD/../vampire/src/qvoronoi/userprintf_rbox.cpp \
    $$PWD/../vampire/src/random/mtrand.cpp \
    $$PWD/../vampire/src/random/random.cpp \
    $$PWD/../vampire/src/simulate/cmc.cpp \
    $$PWD/../vampire/src/simulate/cmc_mc.cpp \
    $$PWD/../vampire/src/simulate/demag.cpp \
    $$PWD/../vampire/src/simulate/energy.cpp \
    $$PWD/../vampire/src/simulate/fields.cpp \
    $$PWD/../vampire/src/simulate/LLB.cpp \
    $$PWD/../vampire/src/simulate/LLGHeun.cpp \
    $$PWD/../vampire/src/simulate/LLGMidpoint.cpp \
    $$PWD/../vampire/src/simulate/mc.cpp \
    $$PWD/../vampire/src/simulate/mc_moves.cpp \
    $$PWD/../vampire/src/simulate/sim.cpp \
    $$PWD/../vampire/src/simulate/standard_programs.cpp \
    $$PWD/../vampire/src/statistics/data.cpp \
    $$PWD/../vampire/src/statistics/initialize.cpp \
    $$PWD/../vampire/src/statistics/magnetization.cpp \
    $$PWD/../vampire/src/statistics/statistics.cpp \
    $$PWD/../vampire/src/statistics/susceptibility.cpp \
    $$PWD/../vampire/src/utility/checkpoint.cpp \
    $$PWD/../vampire/src/utility/errors.cpp \
    $$PWD/../vampire/src/utility/statistics.cpp \
    $$PWD/../vampire/src/utility/units.cpp \
    $$PWD/../vampire/src/utility/vconfig.cpp \
    $$PWD/../vampire/src/utility/vio.cpp \
    $$PWD/../vampire/src/utility/vmath.cpp \
    $$PWD/../vampire/util/cfg2povray.cpp \
    $$PWD/../vampire/util/cfg2rasmol.cpp \
    $$PWD/../vampire/util/exchange-template.cpp \
    $$PWD/../vampire/util/kT.cpp \
    $$PWD/../vampire/util/unit-cell-creator.cpp

